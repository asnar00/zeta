# ᕦ(ツ)ᕤ
# backends/python.py
# author: asnaroo
# zero to anything

from src.backends import Backend, BackendConfig
from src.compiler import *
from src.entity import *
import numpy as np

#--------------------------------------------------------------------------------------------------
class PythonBackend(Backend):
    def __init__(self): pass
    def preamble(self, cp: CompiledProgram, config: BackendConfig) -> str:
        return log_deindent("""
            # ᕦ(ツ)ᕤ
            # generated by zeta.py

            import numpy as np

            #-------------------------------------------------------
            # concrete types
                  
            _u8 = np.uint8
            _u16 = np.uint16
            _u32 = np.uint32
            _u64 = np.uint64
            _i8 = np.int8
            _i16 = np.int16
            _i32 = np.int32
            _i64 = np.int64
            _f32 = np.float32
            _f64 = np.float64
                            
            #-------------------------------------------------------
            # concrete functions
                            
            def _add_f32_f32__f32(a: _f32, b: _f32) -> _f32: return a + b
            def _sub_f32_f32__f32(a: _f32, b: _f32) -> _f32: return a - b
            def _mul_f32_f32__f32(a: _f32, b: _f32) -> _f32: return a * b
            def _div_f32_f32__f32(a: _f32, b: _f32) -> _f32: return a / b
            def _sqrt_f32__f32(a: _f32) -> _f32: return np.sqrt(a)

            def _add_i32_i32__i32(a: _i32, b: _i32) -> _i32: return a + b
            def _sub_i32_i32__i32(a: _i32, b: _i32) -> _i32: return a - b
            def _mul_i32_i32__i32(a: _i32, b: _i32) -> _i32: return a * b
            def _div_i32_i32__i32(a: _i32, b: _i32) -> _i32: return a / b
            def _sqrt_i32__i32(a: _i32) -> _i32: return np.sqrt(a)
        
            
""")
    def setup_methods(self, cp: CompiledProgram, config: BackendConfig):
        backend = self
        log("----------------------------------------------------------------")


#--------------------------------------------------------------------------------------------------
# playing around
